name: CD Deployment

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        type: choice
        options:
          - dev
          - staging
          - prod
      version:
        description: 'Docker image tag version to deploy (e.g., v1.0.0, dev, staging, prod)'
        required: true
        type: string
      cluster_name:
        description: 'EKS cluster name to deploy to'
        required: true
        type: string
        default: 'dotnet-cluster'

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ vars.AWS_ACCOUNT }}:role/GitHubActionsRole
          aws-region: ap-southeast-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name ${{ github.event.inputs.cluster_name }} --region ap-southeast-2

      - name: Update image tag in values file
        run: |
          ENV=${{ github.event.inputs.environment }}
          VERSION=${{ github.event.inputs.version }}
          ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
          sed -i "s|repository:.*|repository: $ECR_REGISTRY/dotnet-app|" charts/$ENV/values.yaml
          sed -i "s/tag:.*/tag: $VERSION/" charts/$ENV/values.yaml

      - name: Build and package Helm chart
        run: |
          cd charts/${{ github.event.inputs.environment }}
          helm dependency build
          helm package .

      - name: Install ArgoCD CLI
        run: |
          curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          install -m 555 argocd-linux-amd64 /usr/local/bin/argocd
          rm argocd-linux-amd64

      - name: Update ArgoCD application
        run: |
          # Check if ArgoCD server is running
          echo "Checking ArgoCD server status..."
          kubectl get pods -n argocd -l app.kubernetes.io/name=argocd-server
          
          # Start port-forwarding in background using the target port
          echo "Starting port-forward on port 8080..."
          kubectl port-forward service/argocd-server -n argocd 8080:8080 &
          PF_PID=$!
          
          # Function to cleanup port-forward
          cleanup() {
            echo "Cleaning up port-forward..."
            kill $PF_PID 2>/dev/null || true
          }
          
          # Set up trap to ensure cleanup happens
          trap cleanup EXIT
          
          # Give the port-forward a moment to establish
          echo "Waiting for port-forward to initialize..."
          sleep 5
          
          # Wait for port-forward to be ready
          echo "Waiting for ArgoCD server to be ready..."
          for i in {1..30}; do
            echo "Attempt $i/30: Checking ArgoCD server..."
            # Try to login directly
            if argocd login localhost:8080 \
              --username admin \
              --password ${{ secrets.ARGOCD_ADMIN_PASSWORD }} \
              --insecure \
              --loglevel debug >/dev/null 2>&1; then
              echo "Successfully connected to ArgoCD server"
              break
            fi
            echo "Waiting for ArgoCD server... attempt $i/30"
            if [ $i -eq 30 ]; then
              echo "Failed to connect to ArgoCD server after 60 seconds"
              echo "Checking port-forward status..."
              ps -p $PF_PID >/dev/null && echo "Port-forward process is running" || echo "Port-forward process is not running"
              echo "Checking port status..."
              netstat -an | grep 8080 || echo "No process listening on port 8080"
              echo "Checking ArgoCD server logs..."
              kubectl logs -n argocd -l app.kubernetes.io/name=argocd-server --tail=50
              exit 1
            fi
            sleep 2
          done
          
          # Update the application
          echo "Updating ArgoCD application..."
          argocd app set dotnet-app-${{ github.event.inputs.environment }} \
            --values charts/${{ github.event.inputs.environment }}/values.yaml \
            --sync-policy automated \
            --auto-prune \
            --self-heal
          
          # Sync the application
          echo "Syncing ArgoCD application..."
          argocd app sync dotnet-app-${{ github.event.inputs.environment }} --force
          
          # Wait for sync to complete
          echo "Waiting for sync to complete..."
          argocd app wait dotnet-app-${{ github.event.inputs.environment }} --timeout 300

      - name: Wait for deployment
        run: |
          ENV=${{ github.event.inputs.environment }}
          kubectl rollout status deployment/dotnet-app-$ENV -n dotnet-app-$ENV --timeout=300s

      - name: Verify deployment
        run: |
          ENV=${{ github.event.inputs.environment }}
          # Check if pods are running
          kubectl get pods -n dotnet-app-$ENV
          # Check if service is available
          kubectl get svc -n dotnet-app-$ENV
          # Check if ingress is configured
          kubectl get ingress -n dotnet-app-$ENV
          